<?php
/**
 * Order
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * TestingTime Public API
 *
 * Partners API to recruit test users with TestingTime programmatically
 *
 * OpenAPI spec version: 1.0.6
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 3.0.23
 */
/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Order Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Order implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Order';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'min_age' => 'float',
'max_age' => 'float',
'users' => 'float',
'method' => 'string',
'venue' => 'string',
'type' => 'string',
'link' => 'string',
'minutes' => 'float',
'title' => 'string',
'location' => '\Swagger\Client\Model\OrderLocation',
'countries' => 'string[]',
'languages' => 'string[]',
'screening' => '\Swagger\Client\Model\Screener[]',
'tags' => 'string',
'gender_mix' => 'string',
'devices' => 'string[]',
'platform' => 'string',
'time_zone' => 'string',
'slots' => 'float[]'    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'min_age' => null,
'max_age' => null,
'users' => null,
'method' => null,
'venue' => null,
'type' => null,
'link' => null,
'minutes' => null,
'title' => null,
'location' => null,
'countries' => null,
'languages' => null,
'screening' => null,
'tags' => null,
'gender_mix' => null,
'devices' => null,
'platform' => null,
'time_zone' => null,
'slots' => null    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'min_age' => 'minAge',
'max_age' => 'maxAge',
'users' => 'users',
'method' => 'method',
'venue' => 'venue',
'type' => 'type',
'link' => 'link',
'minutes' => 'minutes',
'title' => 'title',
'location' => 'location',
'countries' => 'countries',
'languages' => 'languages',
'screening' => 'screening',
'tags' => 'tags',
'gender_mix' => 'genderMix',
'devices' => 'devices',
'platform' => 'platform',
'time_zone' => 'timeZone',
'slots' => 'slots'    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'min_age' => 'setMinAge',
'max_age' => 'setMaxAge',
'users' => 'setUsers',
'method' => 'setMethod',
'venue' => 'setVenue',
'type' => 'setType',
'link' => 'setLink',
'minutes' => 'setMinutes',
'title' => 'setTitle',
'location' => 'setLocation',
'countries' => 'setCountries',
'languages' => 'setLanguages',
'screening' => 'setScreening',
'tags' => 'setTags',
'gender_mix' => 'setGenderMix',
'devices' => 'setDevices',
'platform' => 'setPlatform',
'time_zone' => 'setTimeZone',
'slots' => 'setSlots'    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'min_age' => 'getMinAge',
'max_age' => 'getMaxAge',
'users' => 'getUsers',
'method' => 'getMethod',
'venue' => 'getVenue',
'type' => 'getType',
'link' => 'getLink',
'minutes' => 'getMinutes',
'title' => 'getTitle',
'location' => 'getLocation',
'countries' => 'getCountries',
'languages' => 'getLanguages',
'screening' => 'getScreening',
'tags' => 'getTags',
'gender_mix' => 'getGenderMix',
'devices' => 'getDevices',
'platform' => 'getPlatform',
'time_zone' => 'getTimeZone',
'slots' => 'getSlots'    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const METHOD_USERTEST = 'USERTEST';
const METHOD_FOCUSGROUP = 'FOCUSGROUP';
const METHOD_WORKSHOP = 'WORKSHOP';
const METHOD_INTERVIEW = 'INTERVIEW';
const METHOD_SURVEY = 'SURVEY';
const METHOD_DIARY = 'DIARY';
const VENUE_REMOTE = 'REMOTE';
const VENUE_INHOUSE = 'INHOUSE';
const VENUE_INHOME = 'INHOME';
const TYPE_MODERATED = 'MODERATED';
const TYPE_UNMODERATED = 'UNMODERATED';
const GENDER_MIX_FEMALE = 'FEMALE';
const GENDER_MIX_MALE = 'MALE';
const GENDER_MIX_MIXED = 'MIXED';
const DEVICES_COMPUTER = 'COMPUTER';
const DEVICES_TABLET = 'TABLET';
const DEVICES_PHONE = 'PHONE';
const DEVICES_WATCH = 'WATCH';
const DEVICES_ANY = 'ANY';
const PLATFORM_APPLE = 'APPLE';
const PLATFORM_ANDROID = 'ANDROID';
const PLATFORM_WINDOWS = 'WINDOWS';
const PLATFORM_ANY = 'ANY';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getMethodAllowableValues()
    {
        return [
            self::METHOD_USERTEST,
self::METHOD_FOCUSGROUP,
self::METHOD_WORKSHOP,
self::METHOD_INTERVIEW,
self::METHOD_SURVEY,
self::METHOD_DIARY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getVenueAllowableValues()
    {
        return [
            self::VENUE_REMOTE,
self::VENUE_INHOUSE,
self::VENUE_INHOME,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_MODERATED,
self::TYPE_UNMODERATED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getGenderMixAllowableValues()
    {
        return [
            self::GENDER_MIX_FEMALE,
self::GENDER_MIX_MALE,
self::GENDER_MIX_MIXED,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDevicesAllowableValues()
    {
        return [
            self::DEVICES_COMPUTER,
self::DEVICES_TABLET,
self::DEVICES_PHONE,
self::DEVICES_WATCH,
self::DEVICES_ANY,        ];
    }
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPlatformAllowableValues()
    {
        return [
            self::PLATFORM_APPLE,
self::PLATFORM_ANDROID,
self::PLATFORM_WINDOWS,
self::PLATFORM_ANY,        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['min_age'] = isset($data['min_age']) ? $data['min_age'] : null;
        $this->container['max_age'] = isset($data['max_age']) ? $data['max_age'] : null;
        $this->container['users'] = isset($data['users']) ? $data['users'] : null;
        $this->container['method'] = isset($data['method']) ? $data['method'] : null;
        $this->container['venue'] = isset($data['venue']) ? $data['venue'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['link'] = isset($data['link']) ? $data['link'] : null;
        $this->container['minutes'] = isset($data['minutes']) ? $data['minutes'] : null;
        $this->container['title'] = isset($data['title']) ? $data['title'] : null;
        $this->container['location'] = isset($data['location']) ? $data['location'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['screening'] = isset($data['screening']) ? $data['screening'] : null;
        $this->container['tags'] = isset($data['tags']) ? $data['tags'] : null;
        $this->container['gender_mix'] = isset($data['gender_mix']) ? $data['gender_mix'] : null;
        $this->container['devices'] = isset($data['devices']) ? $data['devices'] : null;
        $this->container['platform'] = isset($data['platform']) ? $data['platform'] : null;
        $this->container['time_zone'] = isset($data['time_zone']) ? $data['time_zone'] : null;
        $this->container['slots'] = isset($data['slots']) ? $data['slots'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['users'] === null) {
            $invalidProperties[] = "'users' can't be null";
        }
        if ($this->container['method'] === null) {
            $invalidProperties[] = "'method' can't be null";
        }
        $allowedValues = $this->getMethodAllowableValues();
        if (!is_null($this->container['method']) && !in_array($this->container['method'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'method', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['venue'] === null) {
            $invalidProperties[] = "'venue' can't be null";
        }
        $allowedValues = $this->getVenueAllowableValues();
        if (!is_null($this->container['venue']) && !in_array($this->container['venue'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'venue', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($this->container['type']) && !in_array($this->container['type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getGenderMixAllowableValues();
        if (!is_null($this->container['gender_mix']) && !in_array($this->container['gender_mix'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'gender_mix', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPlatformAllowableValues();
        if (!is_null($this->container['platform']) && !in_array($this->container['platform'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'platform', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets min_age
     *
     * @return float
     */
    public function getMinAge()
    {
        return $this->container['min_age'];
    }

    /**
     * Sets min_age
     *
     * @param float $min_age min_age
     *
     * @return $this
     */
    public function setMinAge($min_age)
    {
        $this->container['min_age'] = $min_age;

        return $this;
    }

    /**
     * Gets max_age
     *
     * @return float
     */
    public function getMaxAge()
    {
        return $this->container['max_age'];
    }

    /**
     * Sets max_age
     *
     * @param float $max_age max_age
     *
     * @return $this
     */
    public function setMaxAge($max_age)
    {
        $this->container['max_age'] = $max_age;

        return $this;
    }

    /**
     * Gets users
     *
     * @return float
     */
    public function getUsers()
    {
        return $this->container['users'];
    }

    /**
     * Sets users
     *
     * @param float $users users
     *
     * @return $this
     */
    public function setUsers($users)
    {
        $this->container['users'] = $users;

        return $this;
    }

    /**
     * Gets method
     *
     * @return string
     */
    public function getMethod()
    {
        return $this->container['method'];
    }

    /**
     * Sets method
     *
     * @param string $method method
     *
     * @return $this
     */
    public function setMethod($method)
    {
        $allowedValues = $this->getMethodAllowableValues();
        if (!in_array($method, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'method', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['method'] = $method;

        return $this;
    }

    /**
     * Gets venue
     *
     * @return string
     */
    public function getVenue()
    {
        return $this->container['venue'];
    }

    /**
     * Sets venue
     *
     * @param string $venue venue
     *
     * @return $this
     */
    public function setVenue($venue)
    {
        $allowedValues = $this->getVenueAllowableValues();
        if (!in_array($venue, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'venue', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['venue'] = $venue;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $allowedValues = $this->getTypeAllowableValues();
        if (!is_null($type) && !in_array($type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets link
     *
     * @return string
     */
    public function getLink()
    {
        return $this->container['link'];
    }

    /**
     * Sets link
     *
     * @param string $link The url where the participants are being sent to. Use {{PARTICIPANT_ID}} as a placeholder where we put a participants specific id if you need to different urls per user.
     *
     * @return $this
     */
    public function setLink($link)
    {
        $this->container['link'] = $link;

        return $this;
    }

    /**
     * Gets minutes
     *
     * @return float
     */
    public function getMinutes()
    {
        return $this->container['minutes'];
    }

    /**
     * Sets minutes
     *
     * @param float $minutes minutes
     *
     * @return $this
     */
    public function setMinutes($minutes)
    {
        $this->container['minutes'] = $minutes;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title Give the study an optional title. This will be shown in the dashboard. Here you could also add an identifier for your internal orderId or customerId
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets location
     *
     * @return \Swagger\Client\Model\OrderLocation
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param \Swagger\Client\Model\OrderLocation $location location
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[] $countries 2 digits ISO country code in lowercase. e.g. us, ch, de
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[] $languages Languages the test is conducted in or prototype language. 2 digits ISO language code in lowercase. e.g. en, de fr
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets screening
     *
     * @return \Swagger\Client\Model\Screener[]
     */
    public function getScreening()
    {
        return $this->container['screening'];
    }

    /**
     * Sets screening
     *
     * @param \Swagger\Client\Model\Screener[] $screening If you want additional screener questions to be answered. Put in here multiple questions/screener settings to filter the target group further.
     *
     * @return $this
     */
    public function setScreening($screening)
    {
        $this->container['screening'] = $screening;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return string
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param string $tags An ID that identifies a customer ordering. This is important to exclude test users that were already with the same customer.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets gender_mix
     *
     * @return string
     */
    public function getGenderMix()
    {
        return $this->container['gender_mix'];
    }

    /**
     * Sets gender_mix
     *
     * @param string $gender_mix If empty a random mix will be generated. Mixed means 50/50. FEMALE means female only.
     *
     * @return $this
     */
    public function setGenderMix($gender_mix)
    {
        $allowedValues = $this->getGenderMixAllowableValues();
        if (!is_null($gender_mix) && !in_array($gender_mix, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'gender_mix', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['gender_mix'] = $gender_mix;

        return $this;
    }

    /**
     * Gets devices
     *
     * @return string[]
     */
    public function getDevices()
    {
        return $this->container['devices'];
    }

    /**
     * Sets devices
     *
     * @param string[] $devices devices
     *
     * @return $this
     */
    public function setDevices($devices)
    {
        $allowedValues = $this->getDevicesAllowableValues();
        if (!is_null($devices) && array_diff($devices, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'devices', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['devices'] = $devices;

        return $this;
    }

    /**
     * Gets platform
     *
     * @return string
     */
    public function getPlatform()
    {
        return $this->container['platform'];
    }

    /**
     * Sets platform
     *
     * @param string $platform Operating system on the selected devices.
     *
     * @return $this
     */
    public function setPlatform($platform)
    {
        $allowedValues = $this->getPlatformAllowableValues();
        if (!is_null($platform) && !in_array($platform, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'platform', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['platform'] = $platform;

        return $this;
    }

    /**
     * Gets time_zone
     *
     * @return string
     */
    public function getTimeZone()
    {
        return $this->container['time_zone'];
    }

    /**
     * Sets time_zone
     *
     * @param string $time_zone Time zone id, list can be found e.g. here: https://garygregory.wordpress.com/2013/06/18/what-are-the-java-timezone-ids/
     *
     * @return $this
     */
    public function setTimeZone($time_zone)
    {
        $this->container['time_zone'] = $time_zone;

        return $this;
    }

    /**
     * Gets slots
     *
     * @return float[]
     */
    public function getSlots()
    {
        return $this->container['slots'];
    }

    /**
     * Sets slots
     *
     * @param float[] $slots slots
     *
     * @return $this
     */
    public function setSlots($slots)
    {
        $this->container['slots'] = $slots;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
